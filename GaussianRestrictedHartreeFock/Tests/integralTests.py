import numpy as np
from sympy.abc import *
from sympy import *
import sympy

def G(i,j,k,a,Ax,Ay,Az,r):
	A = np.array([Ax,Ay,Az])
	rA = r - A
	Ax = rA[0]
	Ay = rA[1]
	Az = rA[2]
	rA2 = np.dot(rA,rA)
	return Ax**i * Ay**j * Az**k * exp(-a * rA2)


r = np.array([x, y, z])

primitive0 = [0,0,0,	1.0,	0.0, -1.5,  1.2,	r]
primitive1 = [1,0,0,	1.1,	0.1, -1.2,  2.5,	r]
primitive2 = [0,1,0,	0.3,	0.2, -1.0, -0.3,	r]
primitive3 = [0,0,1,	0.9,	0.3, -0.8,  0.1,	r]
primitive4 = [0,0,2,	2.2,	0.4, -0.6, -3.1,	r]
primitive5 = [0,2,0,	2.4,	0.5, -0.4,  3.8,	r]
primitive6 = [2,0,0,	3.1,	0.6, -0.2,  1.3,	r]
primitive7 = [1,1,0,	3.7,	0.7,  0.0,  2.4,	r]
primitive8 = [0,1,1,	1.3,	0.8,  0.2,  5.3,	r]
primitive9 = [1,0,1,	4.3,	0.9,  0.4,  1.2,	r]

primitives = [	primitive0,
				primitive1,
				primitive2,
				primitive3,
				primitive4,
				primitive5,
				primitive6,
				primitive7,
				primitive8,
				primitive9 ]

for i in range(10) :
	for j in range(10) :
		product = G(*primitives[i])*G(*primitives[j])
		print("%d,%d " % (i,j), N(integrate(integrate(integrate(product, (x,-oo, oo)), (y,-oo,oo)), (z,-oo,oo))))		

"""
primitiveA = [0,0,0,0.2,1.2,2.3,3.4,r]
primitiveB = [0,0,0,0.3,-1.3,1.4,-2.4,r]


product = G(*primitiveA)*G(*primitiveB)
print(N(integrate(integrate(integrate(product, (x,-oo, oo)), (y,-oo,oo)), (z,-oo,oo))))
"""

"""
m_exact(0,0) = 1.96870124321530;
m_exact(0,1) = -0.0341172323898471;
m_exact(0,2) = -0.804031477774766;
m_exact(0,3) = 0.527226809908349;
m_exact(0,4) = 2.95367374025867e-6;
m_exact(0,5) = 0.000675323284399051;
m_exact(0,6) = 0.0202562111841077;
m_exact(0,7) = 0.000967087011747088;
m_exact(0,8) = 2.13813050004227e-5;
m_exact(0,9) = 1.40984128295943e-19;
m_exact(1,0) = -0.0341172323898471;
m_exact(1,1) = 0.387827062976667;
m_exact(1,2) = -0.00176248709791666;
m_exact(1,3) = 0.0122388517922682;
m_exact(1,4) = 4.99655646048901e-11;
m_exact(1,5) = 0.00734798949097483;
m_exact(1,6) = 0.00138996712571738;
m_exact(1,7) = -0.00127323177225232;
m_exact(1,8) = 0.00101665428542184;
m_exact(1,9) = -1.81927486326609e-5;
m_exact(2,0) = -0.804031477774766;
m_exact(2,1) = -0.00176248709791666;
m_exact(2,2) = 9.98427851756932;
m_exact(2,3) = -0.0606071391980689;
m_exact(2,4) = 0.0185755368982808;
m_exact(2,5) = 0.000961861089058550;
m_exact(2,6) = 0.0383258102957808;
m_exact(2,7) = -0.000135744841834612;
m_exact(2,8) = -8.30819528805685e-5;
m_exact(2,9) = 0.000882925086794951;
m_exact(3,0) = 0.527226809908349;
m_exact(3,1) = 0.0122388517922682;
m_exact(3,2) = -0.0606071391980689;
m_exact(3,3) = 0.640491765531426;
m_exact(3,4) = -0.00289162677173892;
m_exact(3,5) = 4.59938683989704e-5;
m_exact(3,6) = 0.0224417428337129;
m_exact(3,7) = 0.000155680871167730;
m_exact(3,8) = 1.28786125356206e-6;
m_exact(3,9) = 0.000399808605221194;
m_exact(4,0) = 2.95367374025867e-6;
m_exact(4,1) = 4.99655646048901e-11;
m_exact(4,2) = 0.0185755368982808;
m_exact(4,3) = -0.00289162677173892;
m_exact(4,4) = 0.0233723135930304;
m_exact(4,5) = 1.51663773622826e-24;
m_exact(4,6) = 3.63749494189881e-12;
m_exact(4,7) = 4.69426663197159e-20;
m_exact(4,8) = 1.03888645793693e-24;
m_exact(4,9) = 2.17123310831415e-13;
m_exact(5,0) = 0.000675323284399051;
m_exact(5,1) = 0.00734798949097483;
m_exact(5,2) = 0.000961861089058550;
m_exact(5,3) = 4.59938683989704e-5;
m_exact(5,4) = 1.51663773622826e-24;
m_exact(5,5) = 0.0172362086060265;
m_exact(5,6) = 8.26196083281730e-7;
m_exact(5,7) = -2.20707377259169e-5;
m_exact(5,8) = 0.00100873345509930;
m_exact(5,9) = -1.27038048996005e-7;
m_exact(6,0) = 0.0202562111841077;
m_exact(6,1) = 0.00138996712571738;
m_exact(6,2) = 0.0383258102957808;
m_exact(6,3) = 0.0224417428337129;
m_exact(6,4) = 3.63749494189881e-12;
m_exact(6,5) = 8.26196083281730e-7;
m_exact(6,6) = 0.00703744735730407;
m_exact(6,7) = -1.54331741523399e-5;
m_exact(6,8) = 2.01930457151725e-8;
m_exact(6,9) = 5.69065367227716e-5;
m_exact(7,0) = 0.000967087011747088;
m_exact(7,1) = -0.00127323177225232;
m_exact(7,2) = -0.000135744841834612;
m_exact(7,3) = 0.000155680871167730;
m_exact(7,4) = 4.69426663197159e-20;
m_exact(7,5) = -2.20707377259169e-5;
m_exact(7,6) = -1.54331741523399e-5;
m_exact(7,7) = 0.00126285590311933;
m_exact(7,8) = -7.49167731362069e-7;
m_exact(7,9) = 5.91524141572004e-5;
m_exact(8,0) = 2.13813050004227e-5;
m_exact(8,1) = 0.00101665428542184;
m_exact(8,2) = -8.30819528805685e-5;
m_exact(8,3) = 1.28786125356206e-6;
m_exact(8,4) = 1.03888645793693e-24;
m_exact(8,5) = 0.00100873345509930;
m_exact(8,6) = 2.01930457151725e-8;
m_exact(8,7) = -7.49167731362069e-7;
m_exact(8,8) = 0.0491199707835051;
m_exact(8,9) = 2.13719828184536e-10;
m_exact(9,0) = 1.40984128295943e-19;
m_exact(9,1) = -1.81927486326609e-5;
m_exact(9,2) = 0.000882925086794951;
m_exact(9,3) = 0.000399808605221194;
m_exact(9,4) = 2.17123310831415e-13;
m_exact(9,5) = -1.27038048996005e-7;
m_exact(9,6) = 5.69065367227716e-5;
m_exact(9,7) = 5.91524141572004e-5;
m_exact(9,8) = 2.13719828184536e-10;
m_exact(9,9) = 0.000746311679740889;
"""
